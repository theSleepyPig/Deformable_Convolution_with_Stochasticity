Process ID: 388684
Pretrain model path: /mnt/ssd_2/yxma/ckpts/DCS/ckpt/cifar10/ResNet18/ckpt/model_20240925004445.pth
Does pretrain model path exist? True
Files already downloaded and verified
Files already downloaded and verified
4个点重复
4个点重复
4个点重复
4个点重复
ResNetPartmask(
  (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layer1): ModuleList(
    (0-1): 2 x RandonBasicBlock21(
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): MaskedConv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer2): ModuleList(
    (0): RandonBasicBlock21(
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): MaskedConv2d(64, 128, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): RandonBasicBlock21(
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): MaskedConv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer3): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer4): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (linear): Linear(in_features=512, out_features=10, bias=True)
  (normalize): NormalizeByChannelMeanStd(mean=tensor([0.4914, 0.4822, 0.4465], device='cuda:3'), std=tensor([0.2471, 0.2435, 0.2616], device='cuda:3'))
)
Different keys:
layer1.1.bn1.weight
layer1.1.bn1.bias
layer1.1.bn1.running_mean
layer1.1.bn1.running_var
layer1.1.bn1.num_batches_tracked
layer1.1.conv1.weight
layer1.1.bn2.weight
layer1.1.bn2.bias
layer1.1.bn2.running_mean
layer1.1.bn2.running_var
layer1.1.bn2.num_batches_tracked
layer1.1.conv2.weight
layer2.0.conv1.weight
layer2.1.conv1.weight
normalize.mean
normalize.std
tensor([[[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        ...,


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]]], device='cuda:3')
tensor([[[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        ...,


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]]], device='cuda:3')
tensor([[[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        ...,


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]]], device='cuda:3')
tensor([[[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        ...,


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]]], device='cuda:3')
tensor([[[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        ...,


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]]], device='cuda:3')
tensor([[[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        ...,


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]]], device='cuda:3')
tensor([[[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        ...,


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]]], device='cuda:3')
tensor([[[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        ...,


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]],


        [[[0., 1., 0., 0., 0.],
          [0., 1., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 1., 0.]]]], device='cuda:3')
PGD attacking
[00:00<?,?it/s][00:00<00:27, 2.85it/s][00:00<00:25, 2.98it/s][00:01<00:25, 3.02it/s][00:01<00:24, 3.05it/s][00:01<00:24, 3.06it/s][00:01<00:23, 3.06it/s][00:02<00:23, 3.07it/s][00:02<00:23, 3.07it/s][00:02<00:22, 3.07it/s][00:03<00:22, 3.08it/s][00:03<00:22, 3.07it/s][00:03<00:21, 3.07it/s][00:04<00:21, 3.07it/s][00:04<00:21, 3.08it/s][00:04<00:20, 3.08it/s][00:05<00:20, 3.08it/s][00:05<00:20, 3.08it/s][00:05<00:19, 3.08it/s][00:06<00:19, 3.08it/s][00:06<00:19, 3.08it/s][00:06<00:18, 3.08it/s][00:07<00:18, 3.08it/s][00:07<00:18, 3.08it/s][00:07<00:17, 3.08it/s][00:08<00:17, 3.08it/s][00:08<00:17, 3.08it/s][00:08<00:16, 3.08it/s][00:09<00:16, 3.08it/s][00:09<00:16, 3.08it/s][00:09<00:15, 3.08it/s][00:10<00:15, 3.08it/s][00:10<00:15, 3.08it/s][00:10<00:14, 3.08it/s][00:11<00:14, 3.08it/s][00:11<00:14, 3.08it/s][00:11<00:13, 3.08it/s][00:12<00:13, 3.08it/s][00:12<00:13, 3.08it/s][00:12<00:13, 3.07it/s][00:13<00:12, 3.08it/s][00:13<00:12, 3.08it/s][00:13<00:12, 3.08it/s][00:14<00:11, 3.08it/s][00:14<00:11, 3.08it/s][00:14<00:11, 3.07it/s][00:14<00:10, 3.08it/s][00:15<00:10, 3.08it/s][00:15<00:10, 3.08it/s][00:15<00:09, 3.08it/s][00:16<00:09, 3.08it/s][00:16<00:09, 3.08it/s][00:16<00:08, 3.08it/s][00:17<00:08, 3.08it/s][00:17<00:08, 3.08it/s][00:17<00:07, 3.08it/s][00:18<00:07, 3.08it/s][00:18<00:07, 3.08it/s][00:18<00:06, 3.08it/s][00:19<00:06, 3.08it/s][00:19<00:06, 3.08it/s][00:19<00:05, 3.08it/s][00:20<00:05, 3.08it/s][00:20<00:05, 3.08it/s][00:20<00:04, 3.08it/s][00:21<00:04, 3.08it/s][00:21<00:04, 3.08it/s][00:21<00:03, 3.08it/s][00:22<00:03, 3.08it/s][00:22<00:03, 3.08it/s][00:22<00:02, 3.08it/s][00:23<00:02, 3.08it/s][00:23<00:02, 3.08it/s][00:23<00:01, 3.08it/s][00:24<00:01, 3.08it/s][00:24<00:01, 3.08it/s][00:24<00:00, 3.08it/s][00:25<00:00, 3.08it/s][00:25<00:00, 3.08it/s][00:25<00:00, 3.82it/s][00:25<00:00, 3.10it/s]
[00:00<?,?it/s][00:00<00:25, 3.07it/s][00:00<00:25, 3.08it/s][00:00<00:24, 3.08it/s][00:01<00:24, 3.08it/s][00:01<00:24, 3.08it/s][00:01<00:23, 3.08it/s][00:02<00:23, 3.08it/s][00:02<00:23, 3.08it/s][00:02<00:22, 3.08it/s][00:03<00:22, 3.08it/s][00:03<00:22, 3.08it/s][00:03<00:22, 2.99it/s]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      [00:19<00:31, 1.55it/s][00:19<00:31, 1.55it/s][00:20<00:30, 1.55it/s][00:21<00:29, 1.55it/s][00:21<00:29, 1.55it/s][00:22<00:28, 1.54it/s][00:23<00:27, 1.55it/s][00:23<00:27, 1.55it/s][00:24<00:26, 1.55it/s][00:25<00:25, 1.55it/s][00:25<00:25, 1.55it/s][00:26<00:24, 1.55it/s][00:26<00:23, 1.55it/s][00:27<00:23, 1.55it/s][00:28<00:22, 1.54it/s][00:28<00:22, 1.55it/s][00:29<00:21, 1.55it/s][00:30<00:20, 1.55it/s][00:30<00:20, 1.55it/s][00:31<00:19, 1.55it/s][00:32<00:18, 1.55it/s][00:32<00:18, 1.55it/s][00:33<00:17, 1.55it/s][00:34<00:16, 1.55it/s][00:34<00:16, 1.55it/s][00:35<00:15, 1.55it/s][00:36<00:14, 1.55it/s][00:36<00:14, 1.55it/s][00:37<00:13, 1.55it/s][00:37<00:12, 1.55it/s][00:38<00:12, 1.55it/s][00:39<00:11, 1.55it/s][00:39<00:10, 1.55it/s][00:40<00:10, 1.55it/s][00:41<00:09, 1.55it/s][00:41<00:09, 1.55it/s][00:42<00:08, 1.55it/s][00:43<00:07, 1.55it/s][00:43<00:07, 1.55it/s][00:44<00:06, 1.55it/s][00:45<00:05, 1.55it/s][00:45<00:05, 1.55it/s][00:46<00:04, 1.55it/s][00:47<00:03, 1.55it/s][00:47<00:03, 1.55it/s][00:48<00:02, 1.55it/s][00:48<00:01, 1.55it/s][00:49<00:01, 1.55it/s][00:50<00:00, 1.55it/s][00:50<00:00, 2.01it/s][00:50<00:00, 1.57it/s][2024/11/05 18:22:36] - pgd - Run 79: Accuracy: 0.6799

[00:00<?,?it/s][00:00<00:50, 1.54it/s][00:01<00:49, 1.54it/s][00:01<00:49, 1.54it/s][00:02<00:48, 1.54it/s][00:03<00:47, 1.54it/s][00:03<00:47, 1.54it/s][00:04<00:46, 1.54it/s][00:05<00:45, 1.55it/s][00:05<00:45, 1.55it/s][00:06<00:44, 1.54it/s][00:07<00:44, 1.54it/s][00:07<00:43, 1.55it/s][00:08<00:42, 1.55it/s][00:09<00:42, 1.55it/s][00:09<00:41, 1.55it/s][00:10<00:40, 1.55it/s][00:11<00:40, 1.55it/s][00:11<00:38, 1.60it/s][00:11<00:31, 1.90it/s][00:12<00:26, 2.19it/s][00:12<00:23, 2.45it/s][00:12<00:21, 2.68it/s][00:13<00:19, 2.86it/s][00:13<00:18, 3.00it/s][00:13<00:17, 3.11it/s][00:13<00:16, 3.19it/s][00:14<00:15, 3.25it/s][00:14<00:15, 3.30it/s][00:14<00:15, 3.33it/s][00:15<00:14, 3.35it/s][00:15<00:14, 3.36it/s][00:15<00:13, 3.38it/s][00:15<00:13, 3.38it/s][00:16<00:13, 3.39it/s][00:16<00:12, 3.39it/s][00:16<00:12, 3.40it/s][00:17<00:12, 3.40it/s][00:17<00:12, 3.40it/s][00:17<00:11, 3.40it/s][00:18<00:11, 3.40it/s][00:18<00:11, 3.40it/s][00:18<00:10, 3.40it/s][00:18<00:10, 3.40it/s][00:19<00:10, 3.40it/s][00:19<00:09, 3.40it/s][00:19<00:09, 3.40it/s][00:20<00:09, 3.40it/s][00:20<00:09, 3.40it/s][00:20<00:08, 3.40it/s][00:20<00:08, 3.40it/s][00:21<00:08, 3.40it/s][00:21<00:07, 3.40it/s][00:21<00:07, 3.40it/s][00:22<00:07, 3.40it/s][00:22<00:07, 3.40it/s][00:22<00:06, 3.40it/s][00:23<00:06, 3.40it/s][00:23<00:06, 3.40it/s][00:23<00:05, 3.40it/s][00:23<00:05, 3.40it/s][00:24<00:05, 3.40it/s][00:24<00:04, 3.40it/s][00:24<00:04, 3.40it/s][00:25<00:04, 3.40it/s][00:25<00:04, 3.40it/s][00:25<00:03, 3.40it/s][00:25<00:03, 3.40it/s][00:26<00:03, 3.40it/s][00:26<00:02, 3.39it/s][00:26<00:02, 3.40it/s][00:27<00:02, 3.40it/s][00:27<00:02, 3.40it/s][00:27<00:01, 3.40it/s][00:28<00:01, 3.40it/s][00:28<00:01, 3.40it/s][00:28<00:00, 3.40it/s][00:28<00:00, 3.40it/s][00:29<00:00, 3.40it/s][00:29<00:00, 4.23it/s][00:29<00:00, 2.69it/s][2024/11/05 18:23:05] - pgd - Run 79: Accuracy: 0.6152
[2024/11/05 18:23:05] - pgd Mean: 0.6497, Std: 0.0430
[2024/11/05 18:23:05] - PGD Acc: Mean: 0.6497, Variance: 0.0430
[2024/11/05 18:23:05] - Testing done.

wandb: - 0.005 MB of 0.005 MB uploadedwandb: \ 0.005 MB of 0.005 MB uploadedwandb: | 0.005 MB of 0.005 MB uploadedwandb: / 0.005 MB of 0.011 MB uploadedwandb: - 0.007 MB of 0.018 MB uploadedwandb: \ 0.007 MB of 0.018 MB uploadedwandb: | 0.007 MB of 0.018 MB uploadedwandb: / 0.018 MB of 0.018 MB uploadedwandb: 
wandb: Run history:
wandb:   Nature Acc ▁
wandb: pgd_mean_adv ▁
wandb:  pgd_std_adv ▁
wandb: 
wandb: Run summary:
wandb:   Nature Acc 0.907
wandb: pgd_mean_adv 0.64971
wandb:  pgd_std_adv 0.04302
wandb: 
wandb: 🚀 View run pleasant-grass-6 at: https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-reNUM/runs/mogufxq2
wandb: ⭐️ View project at: https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-reNUM
wandb: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20241105_181447-mogufxq2/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.

nohup: ignoring input
wandb: Currently logged in as: xuanzhu_07 (xuanzhu_07-university-of-sydney). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.19.8 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.16.3
wandb: Run data is saved locally in /home/yxma/hzx/hzx/hzx/rand_defence/wandb/run-20250331_025155-l42l22wa
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run astral-dream-12
wandb: ‚≠êÔ∏è View project at https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-stlmnist
wandb: üöÄ View run at https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-stlmnist/runs/l42l22wa
[2025/03/31 02:51:59] - Namespace(batch_size=128, data_dir='~/datasets/CIFAR/', dataset='stl10', epochs=200, network='ResNet18', worker=4, lr_schedule='multistep', lr_min=0.0, lr_max=0.1, weight_decay=0.0005, momentum=0.9, none_random_training=True, rand_deform_training=False, randpos_deform_training=True, randpos_multi_deform_training=False, is_n_repeat=False, reNum=5, only_adv_randpos_training=False, rand_path_training=False, epsilon=8, alpha=2, c=0.0001, steps=1000, seed=0, attack_iters=20, restarts=1, save_dir='logs/ResNet18_DeformableConvolution', pretrain='/home/yxma/hzx/hzx/hzx/rand_defence/ckpt/stl10/ResNet18/ckpt/model_20250330035103.pth', continue_training=False, lb=2048, pos=0, eot=False, hang=False, device=0)
[2025/03/31 02:51:59] - Dataset: stl10
[2025/03/31 02:52:08] - Evaluating with standard images with random mask...
Process ID: 963766
Pretrain model path: /home/yxma/hzx/hzx/hzx/rand_defence/ckpt/stl10/ResNet18/ckpt/model_20250330035103.pth
Does pretrain model path exist? True
Files already downloaded and verified
Files already downloaded and verified
ResNetPartmask5(
  (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layer1): ModuleList(
    (0): RandonBasicBlock02(
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): MaskedConv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer11): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer2): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer3): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer4): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (linear): Linear(in_features=512, out_features=10, bias=True)
  (normalize): NormalizeByChannelMeanStd(mean=tensor([0.4467, 0.4398, 0.4066], device='cuda:0'), std=tensor([0.2241, 0.2215, 0.2239], device='cuda:0'))
)
Different keys:
normalize.mean
normalize.std
Nature:
[2025/03/31 02:52:11] - Evaluating with standard images with random mask...
tensor([[[[0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.]]],


        [[[0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.]]],


        [[[0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.]]],


        ...,


        [[[0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.]]],


        [[[0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.]]],


        [[[0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.]]]], device='cuda:0')
[2025/03/31 02:52:14] - Evaluating with standard images with random mask...
[2025/03/31 02:52:17] - Nature Acc Mean: 0.6240, Std: 0.0035
PGD attacking
[00:00<?,?it/s][00:01<01:57, 1.90s/it][00:03<01:52, 1.84s/it][00:05<01:49, 1.82s/it][00:07<01:46, 1.81s/it][00:09<01:44, 1.81s/it][00:10<01:42, 1.80s/it][00:12<01:40, 1.80s/it][00:14<01:38, 1.80s/it][00:16<01:37, 1.80s/it][00:18<01:35, 1.80s/it][00:19<01:33, 1.80s/it][00:21<01:31, 1.80s/it][00:23<01:29, 1.80s/it][00:25<01:28, 1.80s/it][00:27<01:26, 1.80s/it][00:28<01:24, 1.80s/it][00:30<01:22, 1.80s/it][00:32<01:20, 1.80s/it][00:34<01:19, 1.80s/it][00:36<01:17, 1.80s/it][00:37<01:15, 1.80s/it][00:39<01:13, 1.80s/it][00:41<01:11, 1.80s/it][00:43<01:10, 1.80s/it][00:45<01:08, 1.80s/it][00:46<01:06, 1.80s/it][00:48<01:04, 1.80s/it][00:50<01:02, 1.80s/it][00:52<01:01, 1.80s/it][00:54<00:59, 1.80s/it][00:55<00:57, 1.80s/it][00:57<00:55, 1.80s/it][00:59<00:53, 1.80s/it][01:01<00:52, 1.80s/it][01:03<00:50, 1.80s/it][01:04<00:48, 1.80s/it][01:06<00:46, 1.80s/it][01:08<00:44, 1.80s/it][01:10<00:43, 1.80s/it][01:12<00:41, 1.80s/it][01:13<00:39, 1.80s/it][01:15<00:37, 1.80s/it][01:17<00:35, 1.80s/it][01:19<00:34, 1.80s/it][01:20<00:32, 1.80s/it][01:22<00:30, 1.80s/it][01:24<00:28, 1.80s/it][01:26<00:26, 1.80s/it][01:28<00:25, 1.80s/it][01:29<00:23, 1.80s/it][01:31<00:21, 1.80s/it][01:33<00:19, 1.80s/it][01:35<00:17, 1.80s/it][01:37<00:16, 1.80s/it][01:38<00:14, 1.80s/it][01:40<00:12, 1.80s/it][01:42<00:10, 1.80s/it][01:44<00:08, 1.80s/it][01:46<00:07, 1.80s/it][01:47<00:05, 1.80s/it][01:49<00:03, 1.80s/it][01:51<00:01, 1.80s/it][01:52<00:00, 1.52s/it][01:52<00:00, 1.78s/it][2025/03/31 02:54:09] - pgd - Run 63: Accuracy: 0.4203

[00:00<?,?it/s][00:01<01:54, 1.85s/it][00:03<01:50, 1.82s/it][00:05<01:48, 1.81s/it][00:07<01:46, 1.80s/it][00:09<01:44, 1.80s/it][00:10<01:42, 1.80s/it][00:12<01:40, 1.80s/it][00:14<01:38, 1.80s/it][00:16<01:37, 1.80s/it][00:18<01:35, 1.80s/it][00:19<01:33, 1.80s/it][00:21<01:31, 1.80s/it][00:23<01:29, 1.80s/it][00:25<01:28, 1.80s/it][00:27<01:26, 1.80s/it][00:28<01:24, 1.80s/it][00:30<01:22, 1.80s/it][00:32<01:20, 1.80s/it][00:34<01:19, 1.80s/it][00:36<01:17, 1.80s/it][00:37<01:15, 1.80s/it][00:39<01:13, 1.80s/it][00:41<01:11, 1.80s/it][00:43<01:10, 1.80s/it][00:45<01:08, 1.80s/it][00:46<01:06, 1.80s/it][00:48<01:04, 1.80s/it][00:50<01:02, 1.80s/it][00:52<01:01, 1.80s/it][00:53<00:59, 1.80s/it][00:55<00:57, 1.80s/it][00:57<00:55, 1.80s/it][00:59<00:53, 1.80s/it][01:01<00:52, 1.80s/it][01:02<00:50, 1.80s/it][01:04<00:48, 1.80s/it][01:06<00:46, 1.80s/it][01:08<00:44, 1.80s/it][01:10<00:43, 1.80s/it][01:11<00:41, 1.80s/it][01:13<00:39, 1.80s/it][01:15<00:37, 1.80s/it][01:17<00:36, 1.80s/it][01:19<00:34, 1.80s/it][01:20<00:32, 1.80s/it][01:22<00:30, 1.80s/it][01:24<00:28, 1.80s/it][01:26<00:27, 1.80s/it][01:28<00:25, 1.80s/it][01:30<00:23, 1.80s/it][01:31<00:21, 1.80s/it][01:33<00:19, 1.80s/it][01:35<00:18, 1.80s/it][01:37<00:16, 1.80s/it][01:39<00:14, 1.80s/it][01:40<00:12, 1.80s/it][01:42<00:10, 1.80s/it][01:44<00:09, 1.80s/it][01:46<00:07, 1.80s/it][01:48<00:05, 1.80s/it][01:49<00:03, 1.80s/it][01:51<00:01, 1.80s/it][01:52<00:00, 1.52s/it][01:52<00:00, 1.79s/it][2025/03/31 02:56:02] - pgd - Run 63: Accuracy: 0.4165

[00:00<?,?it/s][00:01<01:53, 1.83s/it][00:03<01:50, 1.81s/it][00:05<01:48, 1.81s/it][00:07<01:46, 1.80s/it][00:09<01:44, 1.80s/it][00:10<01:42, 1.80s/it][00:12<01:40, 1.80s/it][00:14<01:39, 1.80s/it][00:16<01:37, 1.80s/it][00:18<01:35, 1.80s/it][00:19<01:33, 1.80s/it][00:21<01:31, 1.80s/it][00:23<01:30, 1.80s/it][00:25<01:28, 1.80s/it][00:27<01:26, 1.80s/it][00:28<01:24, 1.80s/it][00:30<01:22, 1.80s/it][00:32<01:21, 1.80s/it][00:34<01:19, 1.80s/it][00:36<01:17, 1.80s/it][00:37<01:15, 1.80s/it][00:39<01:13, 1.80s/it][00:41<01:12, 1.80s/it][00:43<01:10, 1.80s/it][00:45<01:08, 1.80s/it][00:46<01:06, 1.80s/it][00:48<01:04, 1.80s/it][00:50<01:03, 1.80s/it][00:52<01:01, 1.80s/it][00:54<00:59, 1.80s/it][00:55<00:57, 1.80s/it][00:57<00:55, 1.80s/it][00:59<00:54, 1.80s/it][01:01<00:52, 1.80s/it][01:03<00:50, 1.80s/it][01:04<00:48, 1.80s/it][01:06<00:46, 1.80s/it][01:08<00:45, 1.80s/it][01:10<00:43, 1.80s/it][01:12<00:41, 1.80s/it][01:13<00:39, 1.80s/it][01:15<00:37, 1.80s/it][01:17<00:36, 1.80s/it][01:19<00:34, 1.80s/it][01:21<00:32, 1.80s/it][01:22<00:30, 1.80s/it][01:24<00:28, 1.80s/it][01:26<00:27, 1.80s/it][01:28<00:25, 1.80s/it][01:30<00:23, 1.80s/it][01:31<00:21, 1.80s/it][01:33<00:19, 1.80s/it][01:35<00:18, 1.80s/it][01:37<00:16, 1.80s/it][01:39<00:14, 1.80s/it][01:40<00:12, 1.80s/it][01:42<00:10, 1.80s/it][01:44<00:09, 1.80s/it][01:46<00:07, 1.80s/it][01:48<00:05, 1.80s/it][01:49<00:03, 1.80s/it][01:51<00:01, 1.80s/it][01:52<00:00, 1.52s/it][01:52<00:00, 1.79s/it][2025/03/31 02:57:54] - pgd - Run 63: Accuracy: 0.4306
[2025/03/31 02:57:54] - pgd Mean: 0.4225, Std: 0.0060
[2025/03/31 02:57:54] - PGD Acc: Mean: 0.4225, Variance: 0.0060

AA attacking
[00:00<?,?it/s][01:05<1:07:41,65.50s/it][01:49<53:35,52.71s/it]  [02:50<56:27,56.46s/it][03:49<56:30,57.47s/it][04:48<56:07,58.05s/it][05:36<51:56,54.67s/it][06:40<54:02,57.90s/it][07:51<56:51,62.02s/it][08:29<48:57,54.39s/it][09:29<49:38,56.19s/it][10:29<49:44,57.39s/it][11:52<55:20,65.10s/it][12:34<48:27,58.15s/it][13:41<49:45,60.92s/it][14:49<50:24,63.00s/it][16:06<52:29,67.01s/it][16:46<45:19,59.13s/it][17:46<44:21,59.15s/it][19:06<48:09,65.68s/it][20:12<47:07,65.76s/it][21:33<49:04,70.12s/it][22:34<46:00,67.33s/it][23:34<43:30,65.25s/it][24:40<42:30,65.40s/it][25:38<40:02,63.23s/it][26:47<40:03,64.96s/it][27:52<39:04,65.14s/it][29:02<38:46,66.47s/it][29:49<34:21,60.64s/it][30:54<34:00,61.84s/it][31:56<33:08,62.14s/it][32:59<32:12,62.35s/it][33:56<30:23,60.77s/it][35:02<30:05,62.24s/it][35:50<27:03,57.99s/it][36:51<26:26,58.77s/it][37:50<25:35,59.06s/it][38:39<23:14,55.79s/it][39:55<24:43,61.82s/it][41:18<26:12,68.37s/it][42:15<23:46,64.85s/it][42:38<18:18,52.33s/it][43:46<18:58,56.95s/it][44:43<18:02,56.95s/it][45:17<15:01,50.07s/it][45:58<13:26,47.46s/it][47:13<14:52,55.76s/it][48:24<15:02,60.18s/it][49:02<12:32,53.79s/it][49:46<10:57,50.58s/it][50:43<10:31,52.61s/it][51:50<10:25,56.85s/it][52:51<09:41,58.13s/it][54:03<09:20,62.29s/it][55:08<08:26,63.27s/it][56:12<07:23,63.38s/it][56:59<05:51,58.62s/it][58:15<05:18,63.67s/it][59:28<04:26,66.63s/it][1:00:41<03:25,68.54s/it][1:01:44<02:13,66.79s/it][1:02:44<01:04,64.58s/it][1:03:24<00:00,57.33s/it][1:03:24<00:00,60.39s/it][2025/03/31 04:01:19] - autoattack - Run 63: Accuracy: 0.4795

[00:00<?,?it/s][01:08<1:10:23,68.11s/it][02:07<1:04:05,63.04s/it][02:50<53:49,53.82s/it]  [03:38<50:47,51.66s/it][04:12<43:49,45.33s/it][05:13<48:04,50.60s/it][06:12<49:35,53.14s/it][07:19<52:58,57.79s/it][08:18<52:17,58.11s/it][08:52<44:48,50.72s/it][09:49<45:28,52.47s/it][11:20<54:40,64.33s/it][11:59<47:07,56.55s/it][12:45<43:40,53.48s/it][13:52<45:54,57.39s/it][15:04<48:22,61.75s/it][16:06<47:31,61.98s/it][17:09<46:37,62.17s/it][18:29<49:31,67.53s/it][19:45<50:20,70.23s/it][20:58<49:38,70.91s/it][21:55<45:44,66.93s/it][23:03<44:44,67.12s/it][24:03<42:11,64.91s/it][24:30<33:52,53.48s/it][25:26<33:29,54.32s/it][26:38<35:44,59.58s/it][27:39<35:00,60.01s/it][28:45<35:03,61.85s/it][30:00<36:16,65.97s/it][31:05<34:59,65.60s/it][32:04<32:49,63.54s/it][33:17<33:15,66.50s/it][34:06<29:30,61.04s/it][34:31<23:28,50.31s/it][35:42<25:25,56.50s/it][36:23<22:31,51.98s/it][37:04<20:17,48.70s/it][38:20<22:44,56.87s/it][39:47<25:15,65.89s/it][40:36<22:18,60.85s/it][41:25<20:00,57.16s/it][42:30<19:50,59.51s/it][43:31<18:58,59.93s/it][44:29<17:48,59.35s/it][45:26<16:36,58.64s/it][46:48<17:31,65.73s/it][47:48<16:01,64.11s/it][48:36<13:49,59.27s/it][49:44<13:22,61.77s/it][50:20<10:47,53.99s/it][51:20<10:13,55.81s/it][52:29<09:58,59.85s/it][53:30<09:01,60.17s/it][54:31<08:02,60.30s/it][55:44<07:30,64.32s/it][56:52<06:32,65.46s/it][58:02<05:33,66.71s/it][58:46<03:59,59.75s/it][1:00:07<03:18,66.26s/it][1:01:21<02:17,68.72s/it][1:02:11<01:02,62.85s/it][1:02:49<00:00,55.42s/it][1:02:49<00:00,59.83s/it][2025/03/31 05:04:08] - autoattack - Run 63: Accuracy: 0.4884

[00:00<?,?it/s][00:59<1:01:19,59.34s/it][02:15<1:10:14,69.09s/it][03:14<1:04:39,64.65s/it][04:13<1:01:14,62.27s/it][05:01<55:28,57.39s/it]  [06:01<55:17,58.20s/it][07:02<54:59,58.92s/it][08:16<58:26,63.76s/it][09:16<56:16,62.53s/it][10:26<57:30,65.10s/it][11:13<51:23,59.29s/it][12:34<56:04,65.98s/it][13:16<49:04,58.90s/it][14:29<51:28,63.04s/it][15:35<51:03,63.83s/it][16:49<52:23,66.88s/it][17:54<50:48,66.27s/it][18:57<49:08,65.53s/it][20:20<51:48,70.64s/it][21:32<50:53,71.02s/it][22:34<47:57,68.51s/it][23:06<39:10,57.33s/it][24:08<39:09,58.73s/it][25:08<38:32,59.31s/it][25:58<35:40,56.32s/it][26:54<34:48,56.44s/it][28:00<35:34,59.30s/it][29:21<38:23,65.82s/it][30:04<33:24,58.96s/it][31:25<35:55,65.32s/it][32:03<30:35,57.36s/it][33:11<31:15,60.50s/it][34:17<30:59,61.99s/it][35:22<30:31,63.15s/it][36:12<27:30,58.93s/it][37:15<27:05,60.19s/it][37:55<23:30,54.26s/it][38:41<21:32,51.71s/it][39:54<23:17,58.21s/it][41:17<25:05,65.46s/it][42:16<23:22,63.74s/it][42:52<19:20,55.28s/it][43:48<18:33,55.66s/it][44:48<17:58,56.76s/it][45:46<17:11,57.29s/it][46:33<15:20,54.13s/it][47:04<12:36,47.30s/it][47:51<11:47,47.19s/it][48:51<11:51,50.79s/it][49:49<11:29,53.01s/it][50:56<11:28,57.39s/it][52:03<11:00,60.09s/it][53:00<09:53,59.37s/it][54:07<09:14,61.65s/it][54:55<07:39,57.46s/it][56:04<07:06,60.94s/it][57:13<06:20,63.34s/it][58:22<05:24,64.88s/it][59:24<04:16,64.14s/it][1:00:24<03:08,62.91s/it][1:01:37<02:12,66.04s/it][1:02:23<00:59,59.88s/it][1:03:00<00:00,53.04s/it][1:03:00<00:00,60.01s/it][2025/03/31 06:07:09] - autoattack - Run 63: Accuracy: 0.4810
[2025/03/31 06:07:09] - autoattack Mean: 0.4830, Std: 0.0039
[2025/03/31 06:07:09] - Testing done.

wandb: - 0.005 MB of 0.005 MB uploadedwandb: \ 0.005 MB of 0.005 MB uploadedwandb: | 0.005 MB of 0.005 MB uploadedwandb: / 0.005 MB of 0.023 MB uploadedwandb: - 0.023 MB of 0.023 MB uploadedwandb: 
wandb: Run history:
wandb:     Nature Acc Mean ‚ñÅ
wandb:      Nature Acc Std ‚ñÅ
wandb: autoattack_mean_adv ‚ñÅ
wandb:  autoattack_std_adv ‚ñÅ
wandb:        pgd_mean_adv ‚ñÅ
wandb:         pgd_std_adv ‚ñÅ
wandb: 
wandb: Run summary:
wandb:     Nature Acc Mean 0.62404
wandb:      Nature Acc Std 0.00354
wandb: autoattack_mean_adv 0.48296
wandb:  autoattack_std_adv 0.00388
wandb:        pgd_mean_adv 0.42246
wandb:         pgd_std_adv 0.00597
wandb: 
wandb: üöÄ View run astral-dream-12 at: https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-stlmnist/runs/l42l22wa
wandb: Ô∏è‚ö° View job at https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-stlmnist/jobs/QXJ0aWZhY3RDb2xsZWN0aW9uOjU5NDE0Njg5OQ==/version_details/v3
wandb: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20250331_025155-l42l22wa/logs

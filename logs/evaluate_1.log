nohup: ignoring input
wandb: Currently logged in as: xuanzhu_07 (xuanzhu_07-university-of-sydney). Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: | Waiting for wandb.init()...wandb: / Waiting for wandb.init()...wandb: wandb version 0.19.5 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.16.3
wandb: Run data is saved locally in /home/yxma/hzx/hzx/hzx/rand_defence/wandb/run-20250131_060033-tk1dw87a
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run happy-lake-2
wandb: ‚≠êÔ∏è View project at https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-square
wandb: üöÄ View run at https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-square/runs/tk1dw87a
[2025/01/31 06:00:39] - Namespace(batch_size=128, data_dir='~/datasets/CIFAR10/', dataset='cifar10', epochs=200, network='ResNet18', worker=4, lr_schedule='multistep', lr_min=0.0, lr_max=0.1, weight_decay=0.0005, momentum=0.9, none_random_training=True, rand_deform_training=False, randpos_deform_training=True, randpos_multi_deform_training=False, is_n_repeat=False, reNum=5, only_adv_randpos_training=False, rand_path_training=False, epsilon=8, alpha=2, c=0.0001, steps=1000, seed=0, attack_iters=20, restarts=1, save_dir='logs/ResNet18_DeformableConvolution', pretrain='/home/yxma/hzx/hzx/hzx/rand_defence/ckpt/cifar10/ResNet18/ckpt/model_20240928164626.pth', continue_training=False, lb=2048, pos=0, eot=False, bapp_iterations=1000, bapp_stepsize='geometric_progression', bapp_max_evals=100, bapp_initial_evals=100, hang=False, device=0)
[2025/01/31 06:00:39] - Dataset: cifar10
[2025/01/31 06:00:41] - Evaluating with standard images with random mask...
Process ID: 2962475
Pretrain model path: /home/yxma/hzx/hzx/hzx/rand_defence/ckpt/cifar10/ResNet18/ckpt/model_20240928164626.pth
Does pretrain model path exist? True
Files already downloaded and verified
Files already downloaded and verified
ResNetPartmask5(
  (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layer1): ModuleList(
    (0): RandonBasicBlock02(
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): MaskedConv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer11): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer2): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer3): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (layer4): ModuleList(
    (0): BasicBlock(
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (shortcut): Sequential()
    )
  )
  (linear): Linear(in_features=512, out_features=10, bias=True)
  (normalize): NormalizeByChannelMeanStd(mean=tensor([0.4914, 0.4822, 0.4465], device='cuda:0'), std=tensor([0.2471, 0.2435, 0.2616], device='cuda:0'))
)
Different keys:
normalize.mean
normalize.std
Nature:
[2025/01/31 06:00:42] - Nature Acc Mean: 0.8922, Std: 0.0000
tensor([[[[0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.]]],


        [[[0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.]]],


        [[[0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.]]],


        [[[0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.]]],


        [[[0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 1.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.]]]], device='cuda:0')
Square attacking
[00:00<?,?it/s][00:18<24:08,18.56s/it][00:36<23:15,18.12s/it][00:53<22:36,17.85s/it][01:12<22:32,18.04s/it][01:29<22:06,17.93s/it][01:49<22:17,18.32s/it][02:06<21:46,18.15s/it][02:24<21:22,18.07s/it][02:44<21:31,18.46s/it][03:07<22:58,19.98s/it][03:32<24:26,21.56s/it][03:56<24:55,22.32s/it][04:40<31:49,28.93s/it][06:20<54:38,50.43s/it][08:11<1:12:59,68.43s/it][09:54<1:22:49,78.88s/it][11:38<1:29:32,86.65s/it][13:24<1:34:00,92.47s/it][15:13<1:37:16,97.28s/it][16:59<1:38:21,100.02s/it][18:48<1:39:03,102.48s/it][20:29<1:37:11,102.30s/it][22:08<1:34:29,101.25s/it][23:54<1:34:06,102.66s/it][25:39<1:33:06,103.45s/it][27:20<1:30:37,102.60s/it][29:09<1:30:27,104.38s/it][30:53<1:28:47,104.47s/it][32:31<1:25:22,102.44s/it][34:12<1:23:19,102.03s/it][36:03<1:23:42,104.63s/it][37:46<1:21:44,104.35s/it][39:30<1:19:45,104.02s/it][41:19<1:19:11,105.59s/it][43:03<1:17:05,105.14s/it][44:42<1:14:01,103.29s/it][46:31<1:13:23,104.86s/it][48:17<1:12:03,105.46s/it][49:57<1:09:09,103.73s/it][51:47<1:08:40,105.65s/it][53:31<1:06:35,105.14s/it][55:12<1:04:04,103.90s/it][56:55<1:02:11,103.65s/it][58:42<1:01:02,104.63s/it][1:00:28<59:27,104.93s/it][1:01:57<55:09,100.30s/it][1:03:22<51:00,95.64s/it] [1:04:49<48:04,93.04s/it][1:06:17<45:41,91.39s/it][1:07:46<43:49,90.68s/it][1:09:10<41:24,88.72s/it][1:10:31<38:51,86.36s/it][1:11:57<37:25,86.35s/it][1:13:25<36:15,87.00s/it][1:14:45<33:52,84.68s/it][1:16:15<33:09,86.48s/it][1:17:41<31:39,86.35s/it][1:19:12<30:42,87.76s/it][1:20:44<29:39,88.97s/it][1:22:11<27:56,88.25s/it][1:23:36<26:09,87.22s/it][1:24:57<24:11,85.39s/it][1:26:28<23:12,87.01s/it][1:27:30<19:54,79.62s/it][1:28:44<18:10,77.87s/it][1:30:07<17:14,79.55s/it][1:31:33<16:17,81.50s/it][1:32:59<15:11,82.89s/it][1:34:23<13:51,83.15s/it][1:35:44<12:22,82.48s/it][1:36:59<10:42,80.30s/it][1:38:19<09:21,80.16s/it][1:39:42<08:05,80.96s/it][1:41:02<06:43,80.71s/it][1:42:33<05:35,83.86s/it][1:44:05<04:18,86.21s/it][1:45:31<02:52,86.30s/it][1:46:51<01:24,84.30s/it][1:47:53<00:00,77.70s/it][1:47:53<00:00,81.95s/it][2025/01/31 07:48:36] - square - Run 79: Accuracy: 0.8101

[00:00<?,?it/s][01:23<1:48:06,83.17s/it][02:42<1:43:34,80.70s/it][04:00<1:40:58,79.71s/it][05:28<1:43:42,82.97s/it][06:47<1:40:34,81.55s/it][08:02<1:36:14,79.10s/it][09:17<1:33:24,77.84s/it][10:38<1:33:21,78.89s/it][11:54<1:30:55,77.94s/it][13:18<1:31:58,79.98s/it][14:42<1:31:55,81.11s/it][16:10<1:32:58,83.25s/it][17:27<1:29:26,81.31s/it][18:45<1:27:04,80.38s/it][20:04<1:25:13,79.90s/it][21:29<1:25:21,81.29s/it][22:46<1:22:40,80.01s/it][23:53<1:17:26,76.18s/it][25:04<1:14:32,74.54s/it][26:33<1:17:41,79.01s/it][28:03<1:19:37,82.37s/it][29:30<1:19:35,83.79s/it][30:57<1:19:08,84.79s/it][32:18<1:16:39,83.63s/it][33:33<1:12:56,81.05s/it][34:57<1:12:18,81.85s/it][36:21<1:11:28,82.48s/it][37:38<1:08:41,80.82s/it][39:10<1:10:02,84.05s/it][39:50<57:58,70.99s/it]  [41:03<57:15,71.58s/it][42:20<57:26,73.34s/it][43:41<57:55,75.56s/it][45:03<58:05,77.46s/it][46:26<58:02,79.15s/it][47:57<59:17,82.74s/it][49:13<56:31,80.75s/it][50:41<56:31,82.72s/it][52:08<56:05,84.14s/it][53:39<55:54,86.00s/it][54:58<53:16,84.13s/it][56:15<50:34,82.01s/it][57:40<49:36,82.69s/it][59:04<48:35,83.30s/it][1:00:18<45:36,80.48s/it][1:01:40<44:26,80.80s/it][1:03:13<45:07,84.62s/it][1:04:30<42:25,82.11s/it][1:05:58<42:00,84.01s/it][1:07:29<41:39,86.18s/it][1:08:57<40:24,86.59s/it][1:10:16<37:54,84.25s/it][1:11:36<36:01,83.15s/it][1:12:57<34:21,82.48s/it][1:14:15<32:28,81.20s/it][1:15:52<32:54,85.83s/it][1:17:13<30:59,84.50s/it][1:18:40<29:47,85.11s/it][1:20:07<28:32,85.64s/it][1:21:34<27:16,86.14s/it][1:22:56<25:26,84.82s/it][1:24:22<24:11,85.37s/it][1:25:48<22:46,85.40s/it][1:27:18<21:41,86.78s/it][1:28:42<20:02,85.90s/it][1:30:11<18:48,86.78s/it][1:31:37<17:20,86.74s/it][1:33:05<15:58,87.11s/it][1:34:41<14:55,89.58s/it][1:36:02<13:05,87.27s/it][1:37:17<11:06,83.34s/it][1:38:32<09:27,81.06s/it][1:40:10<08:36,86.12s/it][1:41:18<06:42,80.56s/it][1:42:39<05:23,80.87s/it][1:43:57<03:59,79.83s/it][1:45:21<02:42,81.14s/it][1:46:44<01:21,81.61s/it][1:47:45<00:00,75.40s/it][1:47:45<00:00,81.84s/it][2025/01/31 09:36:21] - square - Run 79: Accuracy: 0.8037

[00:00<?,?it/s][01:16<1:39:09,76.28s/it][02:29<1:35:51,74.70s/it][03:51<1:38:25,77.70s/it][06:23<2:14:10,107.34s/it][09:01<2:34:37,125.37s/it][11:25<2:40:18,131.77s/it][13:32<2:36:27,130.38s/it][14:58<2:17:14,115.98s/it][16:23<2:04:06,106.38s/it][17:42<1:52:44,98.04s/it] [18:55<1:42:30,90.45s/it][20:54<1:50:39,99.10s/it][23:38<2:10:25,118.57s/it][26:11<2:19:54,129.14s/it][28:17<2:16:29,127.96s/it][29:39<2:00:00,114.29s/it][31:00<1:47:48,104.32s/it][32:21<1:38:52,97.26s/it] [33:46<1:33:28,93.47s/it][35:08<1:28:30,90.01s/it][36:42<1:28:08,91.17s/it][39:18<1:45:07,110.66s/it][42:03<1:58:40,127.16s/it][44:41<2:04:58,136.33s/it][46:05<1:48:32,120.59s/it][47:13<1:32:32,104.77s/it][48:25<1:22:19,94.98s/it] [49:46<1:17:06,90.71s/it][51:10<1:13:54,88.69s/it][52:26<1:09:20,84.91s/it][53:42<1:05:44,82.18s/it][55:01<1:03:44,81.38s/it][56:22<1:02:21,81.34s/it][57:46<1:01:26,81.91s/it][59:07<59:53,81.68s/it]  [1:00:34<59:42,83.31s/it][1:01:55<57:52,82.68s/it][1:03:18<56:30,82.71s/it][1:04:47<56:21,84.53s/it][1:06:08<54:19,83.57s/it][1:07:19<50:30,79.75s/it][1:08:41<49:41,80.57s/it][1:09:10<39:01,65.04s/it][1:10:31<40:46,69.90s/it][1:11:53<41:33,73.34s/it][1:13:17<42:06,76.55s/it][1:14:42<42:09,79.05s/it][1:16:02<41:05,79.54s/it][1:17:21<39:39,79.33s/it][1:18:36<37:41,77.99s/it][1:19:58<36:57,79.19s/it][1:21:25<36:41,81.54s/it][1:22:49<35:43,82.44s/it][1:24:14<34:37,83.10s/it][1:25:41<33:40,84.20s/it][1:27:07<32:29,84.75s/it][1:28:31<31:02,84.68s/it][1:29:48<28:49,82.34s/it][1:31:05<26:50,80.51s/it][1:32:28<25:46,81.42s/it][1:33:40<23:33,78.51s/it][1:35:07<22:56,80.99s/it][1:36:33<22:01,82.61s/it][1:37:59<20:53,83.53s/it][1:39:20<19:18,82.77s/it][1:40:36<17:30,80.78s/it][1:41:57<16:09,80.82s/it][1:43:17<14:47,80.69s/it][1:44:47<13:55,83.56s/it][1:46:07<12:20,82.32s/it][1:47:36<11:14,84.37s/it][1:49:04<09:57,85.37s/it][1:50:28<08:30,85.05s/it][1:51:54<07:07,85.44s/it][1:53:15<05:35,83.96s/it][1:54:35<04:08,82.83s/it][1:56:06<02:50,85.28s/it][1:57:30<01:24,84.76s/it][1:58:43<00:00,81.52s/it][1:58:43<00:00,90.18s/it][2025/01/31 11:35:05] - square - Run 79: Accuracy: 0.8020
[2025/01/31 11:35:05] - square Mean: 0.8053, Std: 0.0035
[2025/01/31 11:35:05] - Testing done.

wandb: - 0.005 MB of 0.005 MB uploadedwandb: \ 0.005 MB of 0.005 MB uploadedwandb: | 0.005 MB of 0.005 MB uploadedwandb: / 0.005 MB of 0.005 MB uploadedwandb: - 0.005 MB of 0.005 MB uploadedwandb: \ 0.005 MB of 0.005 MB uploadedwandb: | 0.005 MB of 0.005 MB uploadedwandb: / 0.005 MB of 0.005 MB uploadedwandb: - 0.005 MB of 0.005 MB uploadedwandb: \ 0.013 MB of 0.016 MB uploaded (0.003 MB deduped)wandb: | 0.016 MB of 0.031 MB uploaded (0.003 MB deduped)wandb: / 0.016 MB of 0.031 MB uploaded (0.003 MB deduped)wandb: - 0.016 MB of 0.031 MB uploaded (0.003 MB deduped)wandb: \ 0.023 MB of 0.031 MB uploaded (0.003 MB deduped)wandb: | 0.023 MB of 0.031 MB uploaded (0.003 MB deduped)wandb: / 0.023 MB of 0.031 MB uploaded (0.003 MB deduped)wandb: - 0.023 MB of 0.031 MB uploaded (0.003 MB deduped)wandb: \ 0.031 MB of 0.031 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb: Nature Acc Mean ‚ñÅ
wandb:  Nature Acc Std ‚ñÅ
wandb: square_mean_adv ‚ñÅ
wandb:  square_std_adv ‚ñÅ
wandb: 
wandb: Run summary:
wandb: Nature Acc Mean 0.8922
wandb:  Nature Acc Std 0.0
wandb: square_mean_adv 0.80527
wandb:  square_std_adv 0.00349
wandb: 
wandb: üöÄ View run happy-lake-2 at: https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-square/runs/tk1dw87a
wandb: Ô∏è‚ö° View job at https://wandb.ai/xuanzhu_07-university-of-sydney/-Test-square/jobs/QXJ0aWZhY3RDb2xsZWN0aW9uOjU1NDQ3MTUxMg==/version_details/v1
wandb: Synced 6 W&B file(s), 0 media file(s), 2 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20250131_060033-tk1dw87a/logs

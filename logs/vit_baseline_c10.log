nohup: ignoring input
wandb: Currently logged in as: xuanzhu_07 (xuanzhu_07-university-of-sydney). Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: | Waiting for wandb.init()...wandb: / Waiting for wandb.init()...wandb: wandb version 0.19.8 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.5
wandb: Run data is saved locally in /home/yxma/hzx/hzx/rand_defence/wandb/run-20250327_180722-n26ev9me
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run happy-valley-182
wandb: ⭐️ View project at https://wandb.ai/xuanzhu_07-university-of-sydney/findVitVit
wandb: 🚀 View run at https://wandb.ai/xuanzhu_07-university-of-sydney/findVitVit/runs/n26ev9me
[2025/03/27 18:07:27] - Namespace(batch_size=128, data_dir='~/datasets/CIFAR/', dataset='cifar10', epochs=200, network='earlyVit', worker=4, lr_schedule='multistep', lr_min=0.0, lr_max=0.001, weight_decay=0.24, momentum=0.9, none_random_training=True, rand_deform_training=False, randpos_deform_training=False, randpos_multi_deform_training=False, only_adv_randpos_training=False, rand_path_training=False, layerNum=2, randType='repeated', epsilon=8, alpha=2, seed=0, attack_iters=7, restarts=1, none_adv_training=False, save_dir='ckpt/cifar10/earlyVit/ckpt', pretrain=None, continue_training=False, lb=2048, pos=0, eot=False, hang=False, device=3, num_classes=10)
[2025/03/27 18:07:29] - EarlyConvViT(
  (conv_layers): Sequential(
    (0): Sequential(
      (0): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (1): Sequential(
      (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (2): Sequential(
      (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (3): Sequential(
      (0): Conv2d(192, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (conv_1x1): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1))
    (flatten image): Rearrange('batch channels height width -> batch (height width) channels')
  )
  (dropout): Dropout(p=0.0, inplace=False)
  (transformer): Transformer(
    (layers): ModuleList(
      (0-10): 11 x ModuleList(
        (0): PreNorm(
          (norm): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
          (fn): Attention(
            (attend): Softmax(dim=-1)
            (to_qkv): Linear(in_features=192, out_features=576, bias=False)
            (to_out): Sequential(
              (0): Linear(in_features=192, out_features=192, bias=True)
              (1): Dropout(p=0.0, inplace=False)
            )
          )
        )
        (1): PreNorm(
          (norm): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
          (fn): FeedForward(
            (net): Sequential(
              (0): Linear(in_features=192, out_features=576, bias=True)
              (1): GELU(approximate='none')
              (2): Dropout(p=0.0, inplace=False)
              (3): Linear(in_features=576, out_features=192, bias=True)
              (4): Dropout(p=0.0, inplace=False)
            )
          )
        )
      )
    )
  )
  (to_latent): Identity()
  (mlp_head): Sequential(
    (0): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
    (1): Linear(in_features=192, out_features=10, bias=True)
  )
)
/home/yxma/anaconda3/envs/py39_torch/lib/python3.9/site-packages/torch/optim/lr_scheduler.py:139: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
/home/yxma/anaconda3/envs/py39_torch/lib/python3.9/site-packages/torch/optim/lr_scheduler.py:437: UserWarning: To get the last learning rate computed by the scheduler, please use `get_last_lr()`.
  warnings.warn("To get the last learning rate computed by the scheduler, "
[2025/03/27 18:07:29] - epoch 0 lr 1.000000e-03
start_time 20250327180727
Process ID: 689968
Files already downloaded and verified
Files already downloaded and verified


No checkpoint. Train from scratch.
Training using fixed weight.


[2025/03/27 18:07:31] - Iter: [0][0/391]	Loss 2.498 (2.498)	Prec@1 0.117 (0.117)	
[2025/03/27 18:08:00] - Iter: [0][50/391]	Loss 2.324 (2.336)	Prec@1 0.086 (0.094)	
[2025/03/27 18:08:30] - Iter: [0][100/391]	Loss 2.313 (2.324)	Prec@1 0.047 (0.094)	
[2025/03/27 18:08:59] - Iter: [0][150/391]	Loss 2.309 (2.319)	Prec@1 0.109 (0.097)	
[2025/03/27 18:09:29] - Iter: [0][200/391]	Loss 2.313 (2.316)	Prec@1 0.078 (0.097)	
[2025/03/27 18:09:58] - Iter: [0][250/391]	Loss 2.312 (2.314)	Prec@1 0.055 (0.098)	
[2025/03/27 18:10:28] - Iter: [0][300/391]	Loss 2.315 (2.313)	Prec@1 0.086 (0.098)	
[2025/03/27 18:10:57] - Iter: [0][350/391]	Loss 2.307 (2.312)	Prec@1 0.078 (0.098)	
[2025/03/27 18:11:21] - Evaluating with standard images...
[2025/03/27 18:11:24] - Evaluating with PGD Attack...
[2025/03/27 18:13:24] - Test Loss: 2.3058  	 Test Acc: 0.1000  
 PGD Loss: 2.3058 	 PGD Acc: 0.1000 
 Best PGD Acc: 0.1000 	 Test Acc of best PGD ckpt: 0.1000
[2025/03/27 18:13:24] - epoch 1 lr 1.000000e-03
New Best Adv Training
[2025/03/27 18:13:25] - Iter: [1][0/391]	Loss 2.303 (2.303)	Prec@1 0.070 (0.070)	
[2025/03/27 18:13:54] - Iter: [1][50/391]	Loss 2.295 (2.307)	Prec@1 0.102 (0.103)	
[2025/03/27 18:14:24] - Iter: [1][100/391]	Loss 2.309 (2.307)	Prec@1 0.086 (0.101)	
[2025/03/27 18:14:53] - Iter: [1][150/391]	Loss 2.311 (2.307)	Prec@1 0.086 (0.101)	
[2025/03/27 18:15:23] - Iter: [1][200/391]	Loss 2.305 (2.306)	Prec@1 0.078 (0.101)	
[2025/03/27 18:15:52] - Iter: [1][250/391]	Loss 2.308 (2.306)	Prec@1 0.094 (0.102)	
[2025/03/27 18:16:22] - Iter: [1][300/391]	Loss 2.302 (2.306)	Prec@1 0.109 (0.101)	
[2025/03/27 18:16:51] - Iter: [1][350/391]	Loss 2.302 (2.306)	Prec@1 0.133 (0.101)	
[2025/03/27 18:17:14] - Evaluating with standard images...
[2025/03/27 18:17:17] - Evaluating with PGD Attack...
[2025/03/27 18:19:17] - Test Loss: 2.3052  	 Test Acc: 0.1000  
 PGD Loss: 2.3052 	 PGD Acc: 0.1000 
 Best PGD Acc: 0.1000 	 Test Acc of best PGD ckpt: 0.1000
[2025/03/27 18:19:17] - epoch 2 lr 1.000000e-03
[2025/03/27 18:19:18] - Iter: [2][0/391]	Loss 2.316 (2.316)	Prec@1 0.055 (0.055)	
[2025/03/27 18:19:47] - Iter: [2][50/391]	Loss 2.292 (2.305)	Prec@1 0.172 (0.098)	
[2025/03/27 18:20:17] - Iter: [2][100/391]	Loss 2.301 (2.304)	Prec@1 0.102 (0.100)	
[2025/03/27 18:20:46] - Iter: [2][150/391]	Loss 2.306 (2.304)	Prec@1 0.133 (0.102)	
[2025/03/27 18:21:15] - Iter: [2][200/391]	Loss 2.304 (2.304)	Prec@1 0.086 (0.100)	
[2025/03/27 18:21:45] - Iter: [2][250/391]	Loss 2.306 (2.304)	Prec@1 0.055 (0.100)	
[2025/03/27 18:22:14] - Iter: [2][300/391]	Loss 2.306 (2.304)	Prec@1 0.070 (0.099)	
[2025/03/27 18:22:43] - Iter: [2][350/391]	Loss 2.304 (2.304)	Prec@1 0.125 (0.099)	
[2025/03/27 18:23:07] - Evaluating with standard images...
[2025/03/27 18:23:10] - Evaluating with PGD Attack...
[2025/03/27 18:25:09] - Test Loss: 2.3030  	 Test Acc: 0.1000  
 PGD Loss: 2.3030 	 PGD Acc: 0.1000 
 Best PGD Acc: 0.1000 	 Test Acc of best PGD ckpt: 0.1000
[2025/03/27 18:25:09] - epoch 3 lr 1.000000e-03
[2025/03/27 18:25:10] - Iter: [3][0/391]	Loss 2.305 (2.305)	Prec@1 0.078 (0.078)	
[2025/03/27 18:25:39] - Iter: [3][50/391]	Loss 2.306 (2.303)	Prec@1 0.039 (0.093)	
[2025/03/27 18:26:09] - Iter: [3][100/391]	Loss 2.304 (2.303)	Prec@1 0.094 (0.097)	
[2025/03/27 18:26:38] - Iter: [3][150/391]	Loss 2.302 (2.303)	Prec@1 0.102 (0.097)	
[2025/03/27 18:27:07] - Iter: [3][200/391]	Loss 2.304 (2.303)	Prec@1 0.109 (0.098)	
[2025/03/27 18:27:37] - Iter: [3][250/391]	Loss 2.304 (2.303)	Prec@1 0.117 (0.099)	
[2025/03/27 18:28:06] - Iter: [3][300/391]	Loss 2.303 (2.303)	Prec@1 0.047 (0.098)	
